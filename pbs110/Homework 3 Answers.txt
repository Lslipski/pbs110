(1)
total ways to flip = 2^12 = 4096

There are 12 flips and 3 of them need to come up heads
𝑃(3ℎ𝑒𝑎𝑑𝑠)=(12𝑐ℎ𝑜𝑜𝑠𝑒3)/4096=220/4096=55/1024= 0.05

For this to happen, the first 4 flips need to have 2 heads and 2 tails. Then the 5th flip must be heads
𝑃(𝑓𝑖𝑓𝑡ℎ𝑓𝑙𝑖𝑝ℎ𝑒𝑎𝑑)=((4𝑐ℎ𝑜𝑜𝑠𝑒2)/24)∗(1/2)=(6/16)∗(1/2)=(3/8)∗(1/2)=3/16=.1875

# Alternatively, pascal method for 5th flip being the third heads
# p(N = n; r, p) =( (n-1)!/((r-1)!*(n-r)!)). * p^r * (1-p)^(n-r)
# n = 5; r= 3;
(factorial(4)/(factorial(2)*factorial(2))) * .5^3 * .5^2 = 0.1875

So it is more likely to get the third flip heads.

(2)
total ways to answer = 4^12 = 16777216
number of trials = n = 12
probability of success = p(S) = 1/4
probability of failure = p(F) = 3/4

# we can use 1 - pbinom() in R to get this answer
1 - pbinom(5, 12, .25)

probability of 6 or more correct answers = 0.054402232170105

(3)
# using the poisson distribution
mu = 0.4
num_quench = 2
print(paste("The probability of 2 quenches in one month is: ",dpois(num_quench, mu)))

"The probability of 2 quenches in one month is:  0.0536256036828512"


(4)
Number of orders of A and B separately = 4! = 24 for each. Block A can go first or B can go first so x2
To pair each A combination with each B combination we multiply 
24 * 24 = 576*2 = 1152

(5) PLOTS ATTACHED TO HOMEWORK EMAIL

(((Binomial)))
# Create the binomial distribution.
y <- rbinom(100, 50, 0.5)

# Create the binomial distribution.
q <- rbinom(100, 50, 0.25)

# Create the binomial distribution.
k <- rbinom(100, 50, 0.75)

par(mfrow=c(3,1))
# plot binomial
hist(y,main="rbinom(100, 50, 0.5)")
hist(q,main="rbinom(100, 50, 0.25)")
hist(k,main="rbinom(100, 50, 0.75)")


[1] "Actual Mean Graph 1:  25.56"
[1] "Actual Mean Graph 2:  13.15"
[1] "Actual Mean Graph 3:  37.38"
[1] "Expected Mean Graph 1:  25"
[1] "Expected Mean Graph 2:  12.5"
[1] "Expected Mean Graph 3:  37.5"
[1] "Actual STD Graph 1:  3.28239872869544"
[1] "Actual STD Graph 2:  3.18891704489031"
[1] "Actual STD Graph 3:  3.15837830782722"
[1] "Expected STD Graph 1:  3.53553390593274"
[1] "Expected STD Graph 2:  3.06186217847897"
[1] "Expected STD Graph 3:  3.06186217847897"

(((Negative Binomial)))
# Create the negative binomial distribution 
y <- rnbinom(100, 50, 0.5)

# Create the negative binomial distribution.
q <- rnbinom(100, 50, 0.25)

# Create the negative binomial distribution.
k <- rbinom(100, 50, 0.75)

par(mfrow=c(3,1))
# plot binomial
hist(y,main="rnbinom(100, 50, 0.5)")
hist(q,main="rnbinom(100, 50, 0.25)")
hist(k,main="rnbinom(100, 50, 0.75)")

[1] "Actual Mean Graph 1:  50.66"
[1] "Actual Mean Graph 2:  149.15"
[1] "Actual Mean Graph 3:  37.96"
[1] "Expected Mean Graph 1:  100"
[1] "Expected Mean Graph 2:  200"
[1] "Expected Mean Graph 3:  66.6666666666667"
[1] "Actual STD Graph 1:  10.5602838957859"
[1] "Actual STD Graph 2:  24.6729619321445"
[1] "Actual STD Graph 3:  2.960753384877"
[1] "Expected STD Graph 1:  10"
[1] "Expected STD Graph 2:  24.4948974278318"
[1] "Expected STD Graph 3:  4.71404520791032"

(((Poisson)))
# Create the poisson distribution.
y <- rpois(100, .5)

# Create the poisson distribution.
q <- rpois(100, .25)

# Create the poisson distribution.
k <- rpois(100, .75)

par(mfrow=c(3,1))
# plot binomial
hist(y,main="rpois(100,0.5)")
hist(q,main="rpois(100,0.25)")
hist(k,main="rpois(100,0.75)")

[1] "Actual Mean Graph 1:  0.55"
[1] "Actual Mean Graph 2:  0.24"
[1] "Actual Mean Graph 3:  0.64"
[1] "Expected Mean Graph 1:  0.5"
[1] "Expected Mean Graph 2:  0.25"
[1] "Expected Mean Graph 3:  0.75"
[1] "Actual STD Graph 1:  0.88048425610713"
[1] "Actual STD Graph 2:  0.452155332208351"
[1] "Actual STD Graph 3:  0.689312349484263"
[1] "Expected STD Graph 1:  0.707106781186548"
[1] "Expected STD Graph 2:  0.5"
[1] "Expected STD Graph 3:  0.866025403784439"



(6)
# probability of finding no virus
p_x = 0.05
x = 1- dpois(0, p_x)

#percentage of hospitals with wrong conclusion
x*100
#number of hospitals
300*x

4.8770575499286
14.6311726497858


(7)
reps = 10000
die = seq(1, 32, 1)
results = rep(0,reps)  

for (rep in 1:reps)  {     
  slots_to_fill = rep(0,8)  #need to fill all of these slots for the game to be over
  
  while (sum(slots_to_fill) < 8)  {  #keep going until all of the slots are filled i.e. game is over
    random_sample = sample(32, size=1, replace=TRUE)         #roll the die   
    if (random_sample <= 8) { #if the roll is 1-8
        slots_to_fill[random_sample] = 1 #fill the slot corresponding to the roll
    }
    results[rep] = results[rep] + 1      # increment the number of die rolls
  }
}
mean(results)  # take the mean number of rolls for all 10000 games

86.6724
